export const content = [
  [          
    `// import and export keywords -> `,
    `// lets imagine we have an important peice of information that we'll need to reuse across our program`,
    `const importantInfo = 'Protocol 7'`,
    `// we can make this var available to our other files by using export`,
    `export const importantInfo = 'Protocol 7'`,
    `// and then import in a different file like this`,
    `import {importantInfo} from './utility.js';  `,
    `// remember that our script types need to be modular`,
    `◀script src="app.js" defer type="module"▶`,
    `◀script src="util.js" defer type="module"▶`,
    `//we can also export default. We can only have one default per file. It must reference a value to be exported - not a variable. `,
    `export default 'somevalue'`,
    `// to import, we don't need the curly braces anymore`,
    `import somevalueCanBeAnyTitle from './app.js'`,
    ``,
    `// we can also import everything from one file as an object using this syntax`,
    `import * as util from './util.js'`,
    `//and access using normal object notation`,
    `console.log(util.importantInfo)`,
  ], [
    `//Arrow functions are another way of writing functions with their own quirks`,
    `function myFunc (a, b) {`,
      `return a += b`,
    `}`,
    `// turns into `,
    `const myArrowFunc = (a,b) => a += b`,
    ``,
    `// If there is only one parameter, we can ommit the ()'s`,
    `const log = input => console.log(input)`,
    ``,
    `// if there are no parameters, we still need the ()'s`,
    `const greatFunc = () => {
      // some expressions
      // return something
    }`,
    `// if we there is only one statement, we can ommit the return keyword, and have no {braces}. Otherwise, you need both.`,
    `// they're especially useful in callback functions (Callback functions are functions that are passed as arguments to other functions. `,
    `// they are designed to be executed later, after the completion of a specific task or event.`,
     `// callbacks are commonly used in JavaScript for handling events, iterating through arrays, and performing various operations based on the outcome of a function or event.), were we may just need an  anonymous function`,
    ``,
    `// Example of arrow function used as a callback`,
    `const numbers = [1, 2, 3, 4, 5];`,
    `const squaredNumbers = numbers.map(num => num * num);`,
    `console.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]`,
  ], [
    // Array Methods
    `// 1. Array.push(): Adds elements to the end of an array and returns the new length.`,
    `const videoGameCharacters = ['Mario', 'Link'];`,
    `videoGameCharacters.push('Sonic');`,
    `console.log(videoGameCharacters); // Output: ['Mario', 'Link', 'Sonic']`,
    ``,
    `// 2. Array.pop(): Removes the last element from an array and returns that element.`,
    `const lastCharacter = videoGameCharacters.pop();`,
    `   console.log(lastCharacter); // Output: 'Sonic'`,
    `   console.log(videoGameCharacters); // Output: ['Mario', 'Link']`,
    ``,
    `// 3. Array.forEach(): Iterates over an array and executes a callback function for each element.`, 
    `videoGameCharacters.forEach((character) => {`,
    `   console.log(character);`,
    `});`,
    `// Output: 'Mario', 'Link'`,
    ``,
    `// 4. Array.map(): Creates a new array by applying a callback function to each element.`,
    `const uppercaseCharacters = videoGameCharacters.map((character) => {`,
    `   return character.toUpperCase();`,
    `});`,
    `console.log(uppercaseCharacters); // Output: ['MARIO', 'LINK']`,
    ``,
    `// 5. Array.filter(): Creates a new array with all elements that pass (return true) the condition of the provided callback function.`,
    `const numbers = [1, 5, 10, 15, 20];`,
    `const filteredNumbers = numbers.filter((number) => {`,
    `   return number > 10;`,
    `});`,
    `console.log(filteredNumbers); // Output: [15, 20]`,
    ``,
    `// 6. Array.reduce(): Applies a callback function to reduce the array to a single value (from left to right).`,
    `const scores = [85, 90, 78, 95];`,
    `const totalScore = scores.reduce((accumulator, score) => {`,
    `   return accumulator + score;`,
    `}, 0); // 0 is the initial value of the accumulator`,
    `console.log(totalScore); // Output: 348`,

    ``,
    `// Object Methods`,
    `// 1. Object.keys(): Returns an array of the object's own enumerable property names.`,
    `const characterInfo = { name: 'Mario', age: 40, type: 'Plumber' };`,
    `const keys = Object.keys(characterInfo);`,
    `console.log(keys); // Output: ['name', 'age', 'type']`,
    ``,
    `// 2. Object.values(): Returns an array of the object's own enumerable property values.`,
    `const values = Object.values(characterInfo);`,
    `console.log(values); // Output: ['Mario', 40, 'Plumber']`,
    ``,
    `// 3. Object.entries(): Returns an array of the object's own enumerable property key-value pairs`, 
    `const entries = Object.entries(characterInfo);`,
    `console.log(entries);`,
    `// Output: [['name', 'Mario'], ['age', 40], ['type', 'Plumber']]`,
    ``,
    `// 4. Object.assign(): Copies the values of all enumerable properties from one or more source`, `objects to a target object.`,
    `const additionalInfo = { height: '5\'1"', specialAbility: 'Jump' };`,
    `const mergedCharacterInfo = Object.assign({}, characterInfo, additionalInfo);`,
    `console.log(mergedCharacterInfo);`,
    `// Output: { name: 'Mario', age: 40, type: 'Plumber', height: '5\'1"', specialAbility:'Jump' }`,
  ] , [
    `// 'destructuring' arrays and objects,`,
    `const userName = ['Shauna','Vayne'];`,
    `// Lets say we'd like to work with the first and last name separately. `,
    `// We could do: `,
    `const firstName = userName[0]`,
    `const lastName = userName[1]`,
    `// but we can also shorten this by doing the following`,
    `const [firstName, lastName] = ['Shauna','Vayne'];`,
    `console.log(firstName) // return: Shauna`,
    `console.log(lastName) // return: Vayne`,
    `// we can do the same thing with objects`,
    `let samStuff = {`,
      `name: 'Sam',`,
      `hobbies: ['Gaming', 'Reading', 'Watching films']`,
    `}`,
    `// turns into `,
    `const {name, hobies} = {`,
      `name: 'Sam',`,
      `hobbies: ['Gaming', 'Reading', 'Watching films']`,
    `}`,
    `// in objects, you have to use the name you've given the property. In arrays, we can give them any name, because they're pulled out by position. `,
    `// we can set alias' if we desperately want to. I'm sure one day there will be a time you may need to. `,
    `const {name: thisIsTheAliasForName, hobbies} = {`,
    `name: 'Sam',`,
    `hobbies: ['Gaming', 'Reading', 'Watching films']`,
    `}`,
    `console.log(thisIsTheAliasForName) // return: 'Sam'`,
    `console.log(hobbies) // return ['Gaming', 'Reading', 'Watching films']`,
  ]
]

